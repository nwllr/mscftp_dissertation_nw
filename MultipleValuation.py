import pandas as pd import numpy as np# ## Read data for industry multiples obtained from Damodaran# Source: https://pages.stern.nyu.edu/~adamodar/New_Home_Page/data.htmldef create_and_save_multiple_data():    """    This function loads multiple datasets of historical P/E ratios, merges them with a raw dataset, maps business sector names    to their corresponding industries, and merges all these data into a single, consolidated DataFrame.     The resulting DataFrame is then saved as a CSV file and returned.    It performs the following steps:    1. Reads several CSV files containing historical P/E ratios and another CSV file of a cleaned dataset.    2. Maps TRBC Business Sector Names to Damodaran Industries.    3. Reads P/E ratios for S&P500 companies.    4. Merges all the datasets together based on certain conditions.    5. Saves the final dataset to a CSV file.    Returns:        pd.DataFrame: The final merged DataFrame containing the actual P/E and industry multiple data.    """    pedata22 = pd.read_csv("data/historical_PE_multiples_damodaran/pedata22.csv", sep=";", skiprows=7)    pedata21 = pd.read_csv("data/historical_PE_multiples_damodaran/pedata21.csv", sep=";", skiprows=7)    pedata20 = pd.read_csv("data/historical_PE_multiples_damodaran/pedata20.csv", sep=";", skiprows=7)    pedata19 = pd.read_csv("data/historical_PE_multiples_damodaran/pedata19.csv", sep=";", skiprows=7)    pedata18 = pd.read_csv("data/historical_PE_multiples_damodaran/pedata18.csv", sep=";", skiprows=7)        dataset_raw = pd.read_csv("data/cleaned_dataset_2M_delay.csv", parse_dates=[1])    dataset_raw['Date'] = dataset_raw['Date'].dt.to_period('M')        # ## Map TRBC Business Sector Names to Damodaran Industries        # Mapping was done by OpenAI's GPT4        bus_mapping_recent = {        'Healthcare Services & Equipment': 'Heathcare Information and Technology',        'Transportation': 'Transportation',        'Retailers': 'Retail (General)',        'Technology Equipment': 'Computers/Peripherals',        'Pharmaceuticals & Medical Research': 'Drugs (Pharmaceutical)',        'Insurance': 'Insurance (General)',        'Software & IT Services': 'Software (System & Application)',        'Food & Beverages': 'Food Processing',        'Utilities': 'Utility (General)',        'Chemicals': 'Chemical (Diversified)',        'Applied Resources': 'Metals & Mining',        'Industrial Goods': 'Machinery',        'Banking & Investment Services': 'Banks (Regional)',        'Real Estate': 'Real Estate (General/Diversified)',        'Energy - Fossil Fuels': 'Oil/Gas (Integrated)',        'Automobiles & Auto Parts': 'Auto & Truck',        'Cyclical Consumer Services': 'Business & Consumer Services',        'Industrial & Commercial Services': 'Business & Consumer Services',        'Consumer Goods Conglomerates': 'Household Products',        'Personal & Household Products & Services': 'Household Products',        'Telecommunications Services': 'Telecom. Services',        'Cyclical Consumer Products': 'Household Products',        'Renewable Energy': 'Green & Renewable Energy',        'Mineral Resources': 'Metals & Mining',        'Financial Technology (Fintech) & Infrastructure': 'Financial Svcs. (Non-bank & Insurance)',        'Food & Drug Retailing': 'Retail (Grocery and Food)',    }            bus_mapping_recent_df = pd.DataFrame(bus_mapping_recent, index=range(1)).T.reset_index().rename(columns={'index': 'TRBC Business Sector Name',                                                                                     0: 'Industry Name'})        pedata19.rename(columns={'Industry  Name': 'Industry Name'}, inplace=True)    bus_mapping_recent_2023 = pd.merge(bus_mapping_recent_df, pedata22[['Industry Name', 'Trailing PE']], on='Industry Name', how='left')    bus_mapping_recent_2022 = pd.merge(bus_mapping_recent_df, pedata21[['Industry Name', 'Trailing PE']], on='Industry Name', how='left')    bus_mapping_recent_2021 = pd.merge(bus_mapping_recent_df, pedata20[['Industry Name', 'Trailing PE']], on='Industry Name', how='left')    bus_mapping_recent_2020 = pd.merge(bus_mapping_recent_df, pedata19[['Industry Name', 'Trailing PE']], on='Industry Name', how='left')    bus_mapping_recent_2019 = pd.merge(bus_mapping_recent_df, pedata18[['Industry Name', 'Trailing PE']], on='Industry Name', how='left')            # ## Read P/E ratios for S&P500 companies obtained from Compustat    pe_ratios = pd.read_csv("data/historical_PE_multiples_damodaran/pe_ratios_sp500.csv", parse_dates=[3]).rename(columns={'TICKER': 'tic'})    pe_ratios['Date'] = pe_ratios['public_date'].dt.to_period('M')    pe_ratios = pe_ratios[['tic', 'Date', 'pe_exi']]            # ## Merge everything together for test period            multiples_data = dataset_raw[['tic', 'Date', 'TRBC Business Sector Name']]            multiples_data_2023 = pd.merge(        multiples_data[multiples_data['Date'].dt.year == 2023], bus_mapping_recent_2023, on='TRBC Business Sector Name', how='left')        multiples_data_2022 = pd.merge(        multiples_data[multiples_data['Date'].dt.year == 2022], bus_mapping_recent_2022, on='TRBC Business Sector Name', how='left')        multiples_data_2021 = pd.merge(        multiples_data[multiples_data['Date'].dt.year == 2021], bus_mapping_recent_2021, on='TRBC Business Sector Name', how='left')        multiples_data_2020 = pd.merge(        multiples_data[multiples_data['Date'].dt.year == 2020], bus_mapping_recent_2020, on='TRBC Business Sector Name', how='left')        multiples_data_2019 = pd.merge(        multiples_data[multiples_data['Date'].dt.year == 2019], bus_mapping_recent_2019, on='TRBC Business Sector Name', how='left')        multiples_data = pd.concat([multiples_data_2019, multiples_data_2020, multiples_data_2021, multiples_data_2022, multiples_data_2023])                multiples_data = pd.merge(multiples_data, pe_ratios, on=['tic', 'Date'], how='left').dropna()            multiples_data['pe_exi'] = pd.to_numeric(multiples_data['pe_exi'])    multiples_data['Trailing PE'] = multiples_data['Trailing PE'].replace(',', '.', regex=True).astype(float)    multiples_data.to_csv("data/historical_PE_multiples_damodaran/actual_pe_and_ind_multiple.csv")        return multiples_data